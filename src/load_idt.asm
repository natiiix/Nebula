SECTION .text

PORT_PIC_MASTER_CONTROL equ 0x20
PORT_PIC_MASTER_DATA    equ 0x21
PORT_PIC_SLAVE_CONTROL  equ 0xA0
PORT_PIC_SLAVE_DATA     equ 0xA1

PIC_REMAP_MASTER    equ 0x20
PIC_REMAP_SLAVE     equ 0x28

PIC_KEYBOARD        equ PIC_REMAP_MASTER + 0x01 ; IRQ1
PIC_RTC             equ PIC_REMAP_SLAVE  + 0x00 ; IRQ8

; IDT entry attribute indicating that an interrupt handler
; is present and it is a 32-bit interrupt gate.
IDT_ATTRIBUTES_PRESENT_32BIT_INTERRUPT_GATE equ 0x8E

; Singal sent to the PIC control ports to begin the initialization process.
PIC_INIT    equ 0x11

; End-of-Interrupt singal value (sent to the PIC control ports).
PIC_EOI     equ 0x20

%define IDT_ENTRY_BASE_ADDRESS(ID) (idt_start + ((ID) * idt_entry_size))

%macro SET_INTERRUPT 2
    %define _idt_entry_addr IDT_ENTRY_BASE_ADDRESS(%1)

    ; The 32-bit address of the event handler routine must be split
    ; into low and high 16-bit parts to fit the IDT entry structure.
    ; Unfortunately, NASM doesn't seem to support shifting of addresses.
    ; If it did, using `keyhandler >> 16` would save 2 instructions.
    mov eax, %2
    mov word [_idt_entry_addr + idt_entry.handler_low], ax
    shr eax, 16
    mov word [_idt_entry_addr + idt_entry.handler_high], ax

    mov word [_idt_entry_addr + idt_entry.segment], CODE_SEG
    mov byte [_idt_entry_addr + idt_entry.attributes], IDT_ATTRIBUTES_PRESENT_32BIT_INTERRUPT_GATE
%endmacro

; Send EOI (End-of-Interrupt) signal to the master PIC.
; @reg  AL
eoi_master:
    mov al, PIC_EOI
    out PORT_PIC_MASTER_CONTROL, al
    ret

; Send EOI (End-of-Interrupt) signal to the slave PIC.
; @reg  AL
eoi_slave:
    mov al, PIC_EOI
    out PORT_PIC_SLAVE_CONTROL, al
    out PORT_PIC_MASTER_CONTROL, al
    ret

load_idt:
    cli ; disable interrupts (to avoid interrupts during initialization)

    ; ICW1 - begin initialization
    mov al, PIC_INIT
    out PORT_PIC_MASTER_CONTROL, al
    out PORT_PIC_SLAVE_CONTROL, al

    ; ICW2 - remap offset address of idt_table
    ; In x86 protected mode, we have to remap the PICs beyond 0x20 because
    ; Intel have designated the first 32 interrupts as "reserved" for cpu exceptions
    mov al, PIC_REMAP_MASTER
    out PORT_PIC_MASTER_DATA, al
    mov al, PIC_REMAP_SLAVE
    out PORT_PIC_SLAVE_DATA, al

    ; ICW3 - setup cascading
    mov al, 4
    out PORT_PIC_MASTER_DATA, al
    mov al, 2
    out PORT_PIC_SLAVE_DATA, al

    ; ICW4 - environment info
    mov al, 1
    out PORT_PIC_MASTER_DATA, al
    out PORT_PIC_SLAVE_DATA, al

    ; Initialization finished.

    SET_INTERRUPT PIC_KEYBOARD, keyhandler  ; add keyboard event handler to IDT
    SET_INTERRUPT PIC_RTC, rtc_handler      ; add RTC signal/event handler to IDT

    mov al, 0b11111001  ; enable IRQ1 (keyboard events) and IRQ2 (signal to the slave PIC)
    out PORT_PIC_MASTER_DATA, al

    mov al, 0b11111110  ; enable IRQ8 (signals generated by RTC)
    out PORT_PIC_SLAVE_DATA, al

    call rtc_init_interrupts    ; configure RTC interrupts

    lidt [idt_desc]     ; load IDT descriptor

    sti ; enable interrupts
    ret
